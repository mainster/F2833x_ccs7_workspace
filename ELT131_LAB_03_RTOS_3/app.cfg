var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');

var Hwi = xdc.useModule('ti.sysbios.family.c28.Hwi');
var Boot = xdc.useModule('ti.catalog.c2800.init.Boot');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');

/* 
 * Program.argSize sets the size of the .args section. 
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
 */
Defaults.common$.namedModule = false;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
 */
Text.isLoaded = false;

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
 */
SysMin.flushAtExit = false;

/* 
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 256;

/* System stack size (used by ISRs and Swis) */
Program.stack = 1024;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 128;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
/*loggerBufParams.numEntries = 4;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;
*/
System.SupportProxy = SysMin;

/*
 * Build a custom BIOS library.  The custom library will be smaller than the 
 * pre-built "instrumented" (default) and "non-instrumented" libraries.
 *
 * The BIOS.logsEnabled parameter specifies whether the Logging is enabled
 * within BIOS for this custom build.  These logs are used by the RTA and
 * UIA analysis tools.
 *
 * The BIOS.assertsEnabled parameter specifies whether BIOS code will
 * include Assert() checks.  Setting this parameter to 'false' will generate
 * smaller and faster code, but having asserts enabled is recommended for
 * early development as the Assert() checks will catch lots of programming
 * errors (invalid parameters, etc.)
 */
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = false;
BIOS.assertsEnabled = false;

/*
 * Create a task.  The 'taskFxn' function can be found in main.c.
 */
//var task0Params = new Task.Params();
//var task0 = Task.create("&taskFxn", task0Params);
Boot.bootFromFlash = true;
Boot.pllOSCCLK = 30;
BIOS.cpuFreq.lo = 150000000;
BIOS.taskEnabled = true;
BIOS.clockEnabled = false;
BIOS.rtsGateType = BIOS.GateSwi;
/*
var ti_sysbios_hal_Hwi0Params = new ti_sysbios_hal_Hwi.Params();
ti_sysbios_hal_Hwi0Params.instance.name = "Hwi0_SCIA_Tx";
Program.global.MD_SCIA_Tx_irq = ti_sysbios_hal_Hwi.create(97, "&MD_SCIA_Tx_irq", ti_sysbios_hal_Hwi0Params);

var ti_sysbios_hal_Hwi1Params = new ti_sysbios_hal_Hwi.Params();
ti_sysbios_hal_Hwi1Params.instance.name = "Hwi0_SCIA_Rx";
Program.global.MD_SCIA_Rx_irq = ti_sysbios_hal_Hwi.create(96, "&MD_SCIA_Rx_irq", ti_sysbios_hal_Hwi1Params);
*/

//var ti_sysbios_hal_Hwi = xdc.useModule('ti.sysbios.hal.Hwi');

var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "Hwi0_SCIA_Tx";
hwi0Params.enableAck = true;
hwi0Params.enableInt = true;
Program.global.hwi0_tx = Hwi.create(97, "&MD_SCIA_Tx_irq", hwi0Params);

var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "Hwi1_SCIA_Rx";
hwi1Params.enableAck = true;
hwi1Params.enableInt = true;
Program.global.hwi1_rx = Hwi.create(96, "&MD_SCIA_Rx_irq", hwi1Params);

var hwi2Params = new Hwi.Params();
hwi2Params.instance.name = "Hwi2_XINT";
hwi2Params.enableAck = true;
hwi2Params.enableInt = true;
Program.global.hwi2_xint = Hwi.create(35, "&XINT1_GPIO1_isr", hwi2Params);

/*
var hwi3Params = new Hwi.Params();
hwi3Params.instance.name = "Hwi3_CPU_TIM0";
hwi3Params.enableAck = true;
hwi3Params.enableInt = true;
Program.global.hwi3_tim0 = Hwi.create(38, "&CPU_TIM0_isr", hwi2Params);
*/

Hwi.dispatcherIrpTrackingSupport = false;
Hwi.dispatcherAutoNestingSupport = false;

//Idle.idleFxns[0] = "&tsk_idle_UartEnc";
