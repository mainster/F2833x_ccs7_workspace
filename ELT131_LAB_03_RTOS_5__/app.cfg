var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');
/* 
 * Multiline
 */
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Boot = xdc.useModule('ti.catalog.c2800.init.Boot');
//var Task = xdc.useModule('ti.sysbios.knl.Task');
//var Idle = xdc.useModule('ti.sysbios.knl.Idle');
var ti_sysbios_hal_Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
/* 
 * Program.argSize sets the size of the .args section. 
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;
/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;

 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
 */
Defaults.common$.namedModule = false;
/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       
/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;

 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
 */
Text.isLoaded = false;
/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
 */
SysMin.flushAtExit = false;
/* 
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 256;

/* System stack size (used by ISRs and Swis) */
Program.stack = 1024;
/* Circular buffer size for System_printf() */
SysMin.bufSize = 128;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
/*loggerBufParams.numEntries = 4;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;
*/
System.SupportProxy = SysMin;
/*
 * Build a custom BIOS library.  The custom library will be smaller than the 
 * pre-built "instrumented" (default) and "non-instrumented" libraries.
 *
 * The BIOS.logsEnabled parameter specifies whether the Logging is enabled
 * within BIOS for this custom build.  These logs are used by the RTA and
 * UIA analysis tools.
 *
 * The BIOS.assertsEnabled parameter specifies whether BIOS code will
 * include Assert() checks.  Setting this parameter to 'false' will generate
 * smaller and faster code, but having asserts enabled is recommended for
 * early development as the Assert() checks will catch lots of programming
 * errors (invalid parameters, etc.)
 */
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = false;
BIOS.assertsEnabled = false;
/*
 * Create a task.  The 'taskFxn' function can be found in main.c.
 */
//var task0Params = new Task.Params();
//var task0 = Task.create("&taskFxn", task0Params);
Boot.bootFromFlash = true;
Boot.pllOSCCLK = 30;
BIOS.cpuFreq.lo = 150000000;
BIOS.taskEnabled = false;
BIOS.clockEnabled = false;


/*
var ti_sysbios_hal_Hwi0Params = new ti_sysbios_hal_Hwi.Params();
ti_sysbios_hal_Hwi0Params.instance.name = "Hwi0_SCIA_Tx";
Program.global.MD_SCIA_Tx_irq = ti_sysbios_hal_Hwi.create(97, "&MD_SCIA_Tx_irq", ti_sysbios_hal_Hwi0Params);

var ti_sysbios_hal_Hwi1Params = new ti_sysbios_hal_Hwi.Params();
ti_sysbios_hal_Hwi1Params.instance.name = "Hwi0_SCIA_Rx";
Program.global.MD_SCIA_Rx_irq = ti_sysbios_hal_Hwi.create(96, "&MD_SCIA_Rx_irq", ti_sysbios_hal_Hwi1Params);
*/

//var ti_sysbios_hal_Hwi = xdc.useModule('ti.sysbios.hal.Hwi');

/*
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "Hwi0_SCIA_Tx";
hwi0Params.enableAck = true;
hwi0Params.enableInt = true;
Program.global.hwi0_tx = Hwi.create(97, "&MD_SCIA_Tx_irq", hwi0Params);

var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "Hwi1_SCIA_Rx";
hwi1Params.enableAck = true;
hwi1Params.enableInt = true;
Program.global.hwi1_rx = Hwi.create(96, "&MD_SCIA_Rx_irq", hwi1Params);

var hwi3Params = new Hwi.Params();
hwi3Params.instance.name = "Hwi3_CPU_TIM0";
hwi3Params.enableAck = true;
hwi3Params.enableInt = true;
Program.global.hwi3_tim0 = Hwi.create(38, "&CPU_TIM0_isr", hwi2Params);

var hwi2Params = new Hwi.Params();
hwi2Params.instance.name = "hwi2_xint";
Program.global.hwi2_xint = Hwi.create(35, "&XINT1_GPIO1_isr", hwi2Params);
*/

var Hwi = xdc.useModule('ti.sysbios.family.c28.Hwi');

Hwi.dispatcherIrpTrackingSupport = false;
Hwi.dispatcherAutoNestingSupport = false;
ti_sysbios_hal_Hwi.dispatcherAutoNestingSupport = false;
ti_sysbios_hal_Hwi.dispatcherIrpTrackingSupport = false;

//!< Disable SWI
BIOS.swiEnabled = false;

//!< Set C standard library locking to NoLocking
BIOS.rtsGateType = BIOS.NoLocking;

//!< http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/bios/sysbios/6_33_00_19/
//!< exports/bios_6_33_00_19/docs/cdoc/ti/sysbios/family/c28/Hwi.html#zero.Latency.I.E.R.Mask
//!< -----
//!< 
//!< CPU interrupts specified in this mask (which corresponds to the 16-bit IER register) will never be
//!< disabled. This means that the disable, enable, and restore calls leave the zero latency CPU
//!< interrupts enabled after being called. Zero latency operation may be used to ensure minimal
//!< interrupt-to-ISR time for non-BIOS interrupt handlers in applications that demand low latency. 
//!< 
//!< It is important to note that zero latency and non-zero latency PIE interrupts may not share a common
//!< PIE group. The entire PIE group whose bit is set in the zeroLatencyIERMask will be treated as zero
//!< latency.
//!< 
//!< Enabling zero latency mode (specifying a non-zero zeroLatencyIERMask) generates alternate (and
//!< slower) code used to disable, enable and restore interrupts. This alternate code will maintain a
//!< shadow copy of interrupt state (IER register and global interrupt state). disableIER, enableIER and
//!< restoreIER will update both the IER register and its shadow. The disable call will copy the zero
//!< latency IER mask (supplied here) into the IER register. The enable call will copy the contents of
//!< the shadow IER register into the actual register. The restore call may either disable or enable the
//!< non- zero-latency interrupts.
//!< 
Hwi.zeroLatencyIERMask = 0x1;

//http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/bios/sysbios/6_33_00_19/exports/bios_6_33_00_19/docs/cdoc/ti/sysbios/family/c28/Hwi.html
//Hwi.plug(35, (Hwi_PlugFuncPtr *) XINT1_GPIO1_isr);
//Hwi_enableIER(0x0001);

//Hwi_plug(PWM3_1, (Hwi_PlugFuncPtr)gpioToggle);
//Hwi_enableInterrupt(XINT1); //Need to explictly enable 0-lat
//!< Important note
